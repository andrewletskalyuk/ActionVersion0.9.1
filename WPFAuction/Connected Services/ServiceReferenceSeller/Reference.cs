//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPFAuction.ServiceReferenceSeller {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceSeller.IForSeller")]
    public interface IForSeller {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IForSeller/GetServerLotDTOForSeller", ReplyAction="http://tempuri.org/IForSeller/GetServerLotDTOForSellerResponse")]
        AuctionBLLService.DTOClasses.ServerLotDTO[] GetServerLotDTOForSeller(AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IForSeller/GetServerLotDTOForSeller", ReplyAction="http://tempuri.org/IForSeller/GetServerLotDTOForSellerResponse")]
        System.Threading.Tasks.Task<AuctionBLLService.DTOClasses.ServerLotDTO[]> GetServerLotDTOForSellerAsync(AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IForSeller/ConnectionForSeller", ReplyAction="http://tempuri.org/IForSeller/ConnectionForSellerResponse")]
        bool ConnectionForSeller(AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IForSeller/ConnectionForSeller", ReplyAction="http://tempuri.org/IForSeller/ConnectionForSellerResponse")]
        System.Threading.Tasks.Task<bool> ConnectionForSellerAsync(AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IForSeller/AddLot")]
        void AddLot(AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO, AuctionBLLService.DTOClasses.ServerLotDTO serverLotDTO);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IForSeller/AddLot")]
        System.Threading.Tasks.Task AddLotAsync(AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO, AuctionBLLService.DTOClasses.ServerLotDTO serverLotDTO);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IForSeller/DisconnectionForSeller")]
        void DisconnectionForSeller(AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IForSeller/DisconnectionForSeller")]
        System.Threading.Tasks.Task DisconnectionForSellerAsync(AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IForSeller/DeleteLot")]
        void DeleteLot(AuctionBLLService.DTOClasses.ServerLotDTO serverLotDTO, AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IForSeller/DeleteLot")]
        System.Threading.Tasks.Task DeleteLotAsync(AuctionBLLService.DTOClasses.ServerLotDTO serverLotDTO, AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IForSeller/UpdateLot")]
        void UpdateLot(AuctionBLLService.DTOClasses.ServerLotDTO serverLotDTO, AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IForSeller/UpdateLot")]
        System.Threading.Tasks.Task UpdateLotAsync(AuctionBLLService.DTOClasses.ServerLotDTO serverLotDTO, AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IForSellerChannel : WPFAuction.ServiceReferenceSeller.IForSeller, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ForSellerClient : System.ServiceModel.ClientBase<WPFAuction.ServiceReferenceSeller.IForSeller>, WPFAuction.ServiceReferenceSeller.IForSeller {
        
        public ForSellerClient() {
        }
        
        public ForSellerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ForSellerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ForSellerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ForSellerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AuctionBLLService.DTOClasses.ServerLotDTO[] GetServerLotDTOForSeller(AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO) {
            return base.Channel.GetServerLotDTOForSeller(serverSellerDTO);
        }
        
        public System.Threading.Tasks.Task<AuctionBLLService.DTOClasses.ServerLotDTO[]> GetServerLotDTOForSellerAsync(AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO) {
            return base.Channel.GetServerLotDTOForSellerAsync(serverSellerDTO);
        }
        
        public bool ConnectionForSeller(AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO) {
            return base.Channel.ConnectionForSeller(serverSellerDTO);
        }
        
        public System.Threading.Tasks.Task<bool> ConnectionForSellerAsync(AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO) {
            return base.Channel.ConnectionForSellerAsync(serverSellerDTO);
        }
        
        public void AddLot(AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO, AuctionBLLService.DTOClasses.ServerLotDTO serverLotDTO) {
            base.Channel.AddLot(serverSellerDTO, serverLotDTO);
        }
        
        public System.Threading.Tasks.Task AddLotAsync(AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO, AuctionBLLService.DTOClasses.ServerLotDTO serverLotDTO) {
            return base.Channel.AddLotAsync(serverSellerDTO, serverLotDTO);
        }
        
        public void DisconnectionForSeller(AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO) {
            base.Channel.DisconnectionForSeller(serverSellerDTO);
        }
        
        public System.Threading.Tasks.Task DisconnectionForSellerAsync(AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO) {
            return base.Channel.DisconnectionForSellerAsync(serverSellerDTO);
        }
        
        public void DeleteLot(AuctionBLLService.DTOClasses.ServerLotDTO serverLotDTO, AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO) {
            base.Channel.DeleteLot(serverLotDTO, serverSellerDTO);
        }
        
        public System.Threading.Tasks.Task DeleteLotAsync(AuctionBLLService.DTOClasses.ServerLotDTO serverLotDTO, AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO) {
            return base.Channel.DeleteLotAsync(serverLotDTO, serverSellerDTO);
        }
        
        public void UpdateLot(AuctionBLLService.DTOClasses.ServerLotDTO serverLotDTO, AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO) {
            base.Channel.UpdateLot(serverLotDTO, serverSellerDTO);
        }
        
        public System.Threading.Tasks.Task UpdateLotAsync(AuctionBLLService.DTOClasses.ServerLotDTO serverLotDTO, AuctionBLLService.DTOClasses.ServerSellerDTO serverSellerDTO) {
            return base.Channel.UpdateLotAsync(serverLotDTO, serverSellerDTO);
        }
    }
}
